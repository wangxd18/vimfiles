priority -50

snippet :f "Object Method"
${1:method_name} (${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = (${3:first_argument}) => {
	${VISUAL}$0
};
endsnippet

snippet for "for (...) {...} (counting up)" b
for (let ${1:i} = 0; $1 < ${2:Things}.length; ++ $1) {
	const item = $2[$1];
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting up)" b
for (let ${1:i} = ${2:Things}.length - 1; $1 >= 0; -- $1) {
	const item = $2[$1];
	${VISUAL}$0
}
endsnippet

snippet l "Lambda in ES6: Arrow Function" w
(${1:x}) => $1 ${VISUAL}$0
endsnippet

snippet fn "Function assigned to let"
const ${1:fn} = (${2:x}) => {
	${VISUAL}$0
};
endsnippet

snippet fun "JavaScript Function"
functio ${1:fn}(${2:x}) {
	$2 ${VISUAL}$0
}
endsnippet

snippet f "Arrow Function With Block" w
(${1:item}) => {
	$1 ${VISUAL}$0
}
endsnippet

snippet .then "Promise then" i
.then((${1:res}) => {
	$1 ${VISUAL}$0
	return $1;
}, (${2:reason}) => {
	console.error('${3:promise failed.}', $2);
	return $2;
});
endsnippet

snippet .thenf "Promise then with finally" i
.then((${1:res}) => {
	$1 ${VISUAL}$0
	return $1;
})
.catch((${2:reason}) => {
	console.error('${3:promise failed.}', $2);
	return $2;
})
.finally(() => {
});
endsnippet

snippet if "if ... then (if)"
if (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if ... then ... else (if)"
if (${1:true}) {
	${0:#statements}
} else {

}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
})(${2:$1});
endsnippet

snippet timeout "$timeout function"
$timeout(() => {
	${VISUAL}$0
}, ${1:13});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet fo "for .. of iteration" b
for (${1} of ${2}){
	$1
	${VISUAL}$0
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:'${2:value}'});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed('${1:label}');
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ci "console.info" b
console.info(${1:'${2:value}'})

endsnippet

snippet cl "console.log" b
console.log(${1:'${2:value}'});
endsnippet

snippet cd "console.debug" b
console.debug(${1:'${2:value}'});

endsnippet

snippet cprof "console.profile" b
console.profile('${1:label}');
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:'${2:value}'});
endsnippet

snippet ctime "console.time" b
console.time('${1:label}');
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp('${1:label}');
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn" b
console.warn(${1:'${2:value}'});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet


snippet $ "$scope in Angular Controller"
$scope.${1:variable} = ${2:value};
$0
endsnippet



# vim:ft=snippets:
